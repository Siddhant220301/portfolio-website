{"version":3,"file":"static/js/404.15892046.chunk.js","mappings":"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","sources":["components/GlitchText.js","components/CardSwap.js","pages/Experience.js","components/DecryptedText.js"],"sourcesContent":["// src/components/GlitchText.js\r\nimport React from 'react';\r\nimport './GlitchText.css';\r\n\r\nconst GlitchText = ({ text }) => {\r\n  return (\r\n    <h1 className=\"glitch-text\" data-text={text}>\r\n      {text}\r\n    </h1>\r\n  );\r\n};\r\n\r\nexport default GlitchText;","// src/components/CardSwap.js\r\nimport React, { Children, cloneElement, forwardRef, isValidElement, useEffect, useMemo, useRef, useCallback } from \"react\";\r\nimport gsap from \"gsap\";\r\nimport \"./CardSwap.css\";\r\n\r\nexport const Card = forwardRef(\r\n  ({ customClass, ...rest }, ref) => (\r\n    <div ref={ref} {...rest} className={`card ${customClass ?? \"\"} ${rest.className ?? \"\"}`.trim()} />\r\n  )\r\n);\r\nCard.displayName = \"Card\";\r\n\r\nconst makeSlot = (i, distX, distY, total) => ({ x: i * distX, y: -i * distY, z: -i * distX * 1.5, zIndex: total - i });\r\nconst placeNow = (el, slot, skew) => gsap.set(el, { x: slot.x, y: slot.y, z: slot.z, xPercent: -50, yPercent: -50, skewY: skew, transformOrigin: \"center center\", zIndex: slot.zIndex, force3D: true });\r\n\r\nconst CardSwap = ({\r\n  width = 350,\r\n  height = 200,\r\n  cardDistance = 40,\r\n  verticalDistance = 40,\r\n  delay = 5000,\r\n  pauseOnHover = true,\r\n  onCardClick,\r\n  onSwap,\r\n  activeIndex,\r\n  skewAmount = 6,\r\n  children,\r\n}) => {\r\n  const config = { ease: \"elastic.out(0.6,0.9)\", durMove: 1.5 };\r\n  const childArr = useMemo(() => Children.toArray(children), [children]);\r\n  const refs = useMemo(() => childArr.map(() => React.createRef()), [childArr]);\r\n  const order = useRef(Array.from({ length: childArr.length }, (_, i) => i));\r\n  const tlRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const container = useRef(null);\r\n\r\n  const animateToOrder = useCallback((newOrder, duration) => {\r\n    if (tlRef.current?.isActive()) tlRef.current.kill();\r\n    const tl = gsap.timeline();\r\n    tlRef.current = tl;\r\n    newOrder.forEach((cardIdx, i) => {\r\n      const el = refs[cardIdx].current;\r\n      const slot = makeSlot(i, cardDistance, verticalDistance, refs.length);\r\n      tl.to(el, { ...slot, duration, ease: config.ease }, 0);\r\n    });\r\n  }, [refs, cardDistance, verticalDistance, config.ease]);\r\n\r\n  const swap = useCallback(() => {\r\n    const newOrder = [...order.current];\r\n    const front = newOrder.shift();\r\n    newOrder.push(front);\r\n    order.current = newOrder;\r\n    onSwap?.(newOrder[0]);\r\n  }, [onSwap]);\r\n  \r\n  useEffect(() => {\r\n    if (activeIndex !== undefined && activeIndex !== order.current[0]) {\r\n      const newOrder = [...order.current];\r\n      const currentPos = newOrder.indexOf(activeIndex);\r\n      if (currentPos !== -1) {\r\n        const [item] = newOrder.splice(currentPos, 1);\r\n        newOrder.unshift(item);\r\n        order.current = newOrder;\r\n        animateToOrder(newOrder, config.durMove);\r\n      }\r\n    }\r\n  }, [activeIndex, animateToOrder, config.durMove]);\r\n\r\n  useEffect(() => {\r\n    refs.forEach((r, i) => placeNow(r.current, makeSlot(i, cardDistance, verticalDistance, refs.length), skewAmount));\r\n    \r\n    const startInterval = () => {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = setInterval(swap, delay);\r\n    };\r\n    startInterval();\r\n\r\n    if (pauseOnHover) {\r\n      const node = container.current;\r\n      const pause = () => clearInterval(intervalRef.current);\r\n      const resume = () => startInterval();\r\n      node.addEventListener(\"mouseenter\", pause);\r\n      node.addEventListener(\"mouseleave\", resume);\r\n      return () => { node.removeEventListener(\"mouseenter\", pause); node.removeEventListener(\"mouseleave\", resume); clearInterval(intervalRef.current); };\r\n    }\r\n    return () => clearInterval(intervalRef.current);\r\n  }, [refs, cardDistance, verticalDistance, skewAmount, swap, delay, pauseOnHover]);\r\n\r\n  const rendered = childArr.map((child, i) =>\r\n    isValidElement(child) ? cloneElement(child, { key: i, ref: refs[i], style: { width, height, ...(child.props.style ?? {}) }, onClick: (e) => { child.props.onClick?.(e); onCardClick?.(i); } }) : child\r\n  );\r\n\r\n  return <div ref={container} className=\"card-swap-container\" style={{ width, height }}>{rendered}</div>;\r\n};\r\n\r\nexport default CardSwap;","import React, { useState } from 'react';\r\nimport './Experience.css';\r\nimport { motion } from 'framer-motion';\r\nimport CardSwap, { Card } from '../components/CardSwap';\r\nimport GlitchText from '../components/GlitchText';\r\nimport DecryptedText from '../components/DecryptedText';\r\n\r\nconst experienceData = [\r\n  { title: \"Digital Marketing Intern\", company: \"Shiva Enterprises\", date: \"Apr 2025 - Jul 2025\", achievements: [\"Developed and executed multichannel digital marketing campaigns to increase brand visibility and drive targeted traffic.\", \"Created engaging posts using Canva and Photoshop.\"]},\r\n  { title: \"Data Analyst Intern\", company: \"BitAce Technologies\", date: \"Mar 2024 - Jun 2024\", achievements: [\"Conducted initial data entry and quality assurance tasks, identifying and correcting errors to maintain data integrity.\", \"Transitioned to web scraping and email marketing, managing a dataset of 8 million potential clients.\", \"Analyzed competitors' products and market positioning to inform strategic business decisions.\", \"Advanced to pure data analysis, leveraging tools to extract actionable insights.\"]},\r\n  { title: \"Data Analyst Intern\", company: \"Agrigravity Technology\", date: \"Jun 2024 - Mar 2025\", achievements: [\"Conducted commodity research and identified trends to support market analysis.\", \"Built dashboards and streamlined lead generation processes.\", \"Conducted competitor research to identify market opportunities and threats.\", \"Progressed to advanced data analysis to drive strategy.\", \"Assisted in recruitment and conducted interviews for data analysis roles.\", \"Developed leadership skills through employee training and development.\", \"Started working as a Product Manager, using Jira to coordinate tasks and test the product.\"]}\r\n];\r\n\r\nconst listVariants = {\r\n  visible: { opacity: 1, transition: { when: \"beforeChildren\", staggerChildren: 0.1 } },\r\n  hidden: { opacity: 0 },\r\n};\r\n\r\nconst itemVariants = {\r\n  visible: { opacity: 1, x: 0 },\r\n  hidden: { opacity: 0, x: -20 },\r\n};\r\n\r\nfunction Experience() {\r\n  const [activeIndex, setActiveIndex] = useState(0);\r\n  const activeExperience = experienceData[activeIndex];\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"experience-layout\"\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      transition={{ duration: 0.5 }}\r\n    >\r\n      <div className=\"details-column\">\r\n        <GlitchText text=\"Experience\" />\r\n        {activeExperience && (\r\n          <motion.div \r\n            key={activeIndex} \r\n            className=\"experience-item\"\r\n            initial={{ opacity: 0, y: 10 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.4 }}\r\n          >\r\n            <DecryptedText text={activeExperience.title} sequential parentClassName=\"experience-title\" />\r\n            <p className=\"company\">{activeExperience.company}</p>\r\n            <p className=\"date\">{activeExperience.date}</p>\r\n            <motion.ul variants={listVariants} initial=\"hidden\" animate=\"visible\">\r\n              {activeExperience.achievements.map((item, index) => (\r\n                <motion.li key={index} variants={itemVariants}>{item}</motion.li>\r\n              ))}\r\n            </motion.ul>\r\n          </motion.div>\r\n        )}\r\n      </div>\r\n      <div className=\"cards-column\">\r\n        <CardSwap \r\n          onSwap={setActiveIndex} \r\n          onCardClick={setActiveIndex}\r\n          activeIndex={activeIndex}\r\n          width={600}\r\n          height={330}\r\n        >\r\n          {experienceData.map((exp, index) => (\r\n            <Card key={index}>\r\n              <h3>{exp.title}</h3>\r\n              <p>{exp.company}</p>\r\n            </Card>\r\n          ))}\r\n        </CardSwap>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport default Experience;","// src/components/DecryptedText.js\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { motion } from 'framer-motion'; // Correct import from framer-motion\r\n\r\nconst styles = {\r\n  wrapper: {\r\n    display: 'inline-block',\r\n    whiteSpace: 'pre-wrap',\r\n  },\r\n  srOnly: {\r\n    position: 'absolute',\r\n    width: '1px',\r\n    height: '1px',\r\n    padding: 0,\r\n    margin: '-1px',\r\n    overflow: 'hidden',\r\n    clip: 'rect(0,0,0,0)',\r\n    border: 0,\r\n  },\r\n};\r\n\r\nexport default function DecryptedText({\r\n  text,\r\n  speed = 50,\r\n  maxIterations = 10,\r\n  sequential = false,\r\n  revealDirection = 'start',\r\n  useOriginalCharsOnly = false,\r\n  characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!@#$%^&*()_+',\r\n  className = '',\r\n  parentClassName = '',\r\n  encryptedClassName = '',\r\n  animateOn = 'hover',\r\n  ...props\r\n}) {\r\n  const [displayText, setDisplayText] = useState(text);\r\n  const [isHovering, setIsHovering] = useState(false);\r\n  const [isScrambling, setIsScrambling] = useState(false);\r\n  const [revealedIndices, setRevealedIndices] = useState(new Set());\r\n  const [hasAnimated, setHasAnimated] = useState(false);\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n    let currentIteration = 0;\r\n\r\n    const getNextIndex = (revealedSet) => {\r\n      const textLength = text.length;\r\n      switch (revealDirection) {\r\n        case 'start': return revealedSet.size;\r\n        case 'end': return textLength - 1 - revealedSet.size;\r\n        case 'center': {\r\n          const middle = Math.floor(textLength / 2);\r\n          const offset = Math.floor(revealedSet.size / 2);\r\n          const nextIndex = revealedSet.size % 2 === 0 ? middle + offset : middle - offset - 1;\r\n          if (nextIndex >= 0 && nextIndex < textLength && !revealedSet.has(nextIndex)) return nextIndex;\r\n          for (let i = 0; i < textLength; i++) { if (!revealedSet.has(i)) return i; }\r\n          return 0;\r\n        }\r\n        default: return revealedSet.size;\r\n      }\r\n    };\r\n\r\n    const availableChars = useOriginalCharsOnly ? Array.from(new Set(text.split(''))).filter((char) => char !== ' ') : characters.split('');\r\n\r\n    const shuffleText = (originalText, currentRevealed) => {\r\n      return originalText.split('').map((char, i) => {\r\n        if (char === ' ') return ' ';\r\n        if (currentRevealed.has(i)) return originalText[i];\r\n        return availableChars[Math.floor(Math.random() * availableChars.length)];\r\n      }).join('');\r\n    };\r\n\r\n    if (isHovering) {\r\n      setIsScrambling(true);\r\n      interval = setInterval(() => {\r\n        setRevealedIndices((prevRevealed) => {\r\n          if (sequential) {\r\n            if (prevRevealed.size < text.length) {\r\n              const nextIndex = getNextIndex(prevRevealed);\r\n              const newRevealed = new Set(prevRevealed);\r\n              newRevealed.add(nextIndex);\r\n              setDisplayText(shuffleText(text, newRevealed));\r\n              return newRevealed;\r\n            } else {\r\n              clearInterval(interval);\r\n              setIsScrambling(false);\r\n              return prevRevealed;\r\n            }\r\n          } else {\r\n            setDisplayText(shuffleText(text, prevRevealed));\r\n            currentIteration++;\r\n            if (currentIteration >= maxIterations) {\r\n              clearInterval(interval);\r\n              setIsScrambling(false);\r\n              setDisplayText(text);\r\n            }\r\n            return prevRevealed;\r\n          }\r\n        });\r\n      }, speed);\r\n    } else {\r\n      setDisplayText(text);\r\n      setRevealedIndices(new Set());\r\n      setIsScrambling(false);\r\n    }\r\n\r\n    return () => { if (interval) clearInterval(interval); };\r\n  }, [isHovering, text, speed, maxIterations, sequential, revealDirection, characters, useOriginalCharsOnly]);\r\n\r\n  useEffect(() => {\r\n    if (animateOn !== 'view') return;\r\n    const observer = new IntersectionObserver((entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting && !hasAnimated) {\r\n          setIsHovering(true);\r\n          setHasAnimated(true);\r\n        }\r\n      });\r\n    }, { threshold: 0.1 });\r\n    const currentRef = containerRef.current;\r\n    if (currentRef) observer.observe(currentRef);\r\n    return () => { if (currentRef) observer.unobserve(currentRef); };\r\n  }, [animateOn, hasAnimated]);\r\n\r\n  const hoverProps = animateOn === 'hover' ? { onMouseEnter: () => setIsHovering(true), onMouseLeave: () => setIsHovering(false) } : {};\r\n\r\n  return (\r\n    <motion.span className={parentClassName} ref={containerRef} style={styles.wrapper} {...hoverProps} {...props}>\r\n      <span style={styles.srOnly}>{displayText}</span>\r\n      <span aria-hidden=\"true\">\r\n        {displayText.split('').map((char, index) => {\r\n          const isRevealedOrDone = revealedIndices.has(index) || !isScrambling || !isHovering;\r\n          return <span key={index} className={isRevealedOrDone ? className : encryptedClassName}>{char}</span>;\r\n        })}\r\n      </span>\r\n    </motion.span>\r\n  );\r\n}"],"names":["_ref","text","_jsx","className","children","Card","forwardRef","ref","_rest$className","customClass","rest","_objectWithoutProperties","_excluded","_objectSpread","concat","trim","displayName","makeSlot","i","distX","distY","total","x","y","z","zIndex","_ref2","width","height","cardDistance","verticalDistance","delay","pauseOnHover","onCardClick","onSwap","activeIndex","skewAmount","config","childArr","useMemo","Children","toArray","refs","map","React","order","useRef","Array","from","length","_","tlRef","intervalRef","container","animateToOrder","useCallback","newOrder","duration","_tlRef$current","current","isActive","kill","tl","gsap","timeline","forEach","cardIdx","el","slot","to","ease","swap","front","shift","push","useEffect","undefined","currentPos","indexOf","item","splice","unshift","r","placeNow","skew","set","xPercent","yPercent","skewY","transformOrigin","force3D","startInterval","clearInterval","setInterval","node","pause","resume","addEventListener","removeEventListener","rendered","child","_child$props$style","isValidElement","cloneElement","key","style","props","onClick","e","_child$props$onClick","_child$props","call","experienceData","title","company","date","achievements","listVariants","visible","opacity","transition","when","staggerChildren","hidden","itemVariants","setActiveIndex","useState","activeExperience","_jsxs","motion","div","initial","animate","GlitchText","DecryptedText","sequential","parentClassName","ul","variants","index","li","CardSwap","exp","styles","wrapper","display","whiteSpace","srOnly","position","padding","margin","overflow","clip","border","speed","maxIterations","revealDirection","useOriginalCharsOnly","characters","encryptedClassName","animateOn","displayText","setDisplayText","isHovering","setIsHovering","isScrambling","setIsScrambling","revealedIndices","setRevealedIndices","Set","hasAnimated","setHasAnimated","containerRef","interval","currentIteration","availableChars","split","filter","char","shuffleText","originalText","currentRevealed","has","Math","floor","random","join","prevRevealed","size","nextIndex","revealedSet","textLength","middle","offset","getNextIndex","newRevealed","add","observer","IntersectionObserver","entries","entry","isIntersecting","threshold","currentRef","observe","unobserve","hoverProps","onMouseEnter","onMouseLeave","span","isRevealedOrDone"],"sourceRoot":""}